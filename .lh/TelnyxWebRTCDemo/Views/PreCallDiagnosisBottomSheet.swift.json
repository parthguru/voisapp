{
    "sourceFile": "TelnyxWebRTCDemo/Views/PreCallDiagnosisBottomSheet.swift",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752707499139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752707499139,
            "name": "Commit-0",
            "content": "//\n//  PreCallDiagnosisBottomSheet.swift\n//  TelnyxWebRTCDemo\n//\n//  Created by AI SWE Agent on 12/06/2025.\n//  Copyright Â© 2025 Telnyx LLC. All rights reserved.\n//\n\nimport SwiftUI\nimport TelnyxRTC\n\nstruct PreCallDiagnosisBottomSheet: View {\n    @Binding var isPresented: Bool\n    @ObservedObject var viewModel: HomeViewModel\n    \n    @State private var preCallDiagnosisState: PreCallDiagnosisState?\n    @State private var isRunningDiagnosis = false\n    \n    var body: some View {\n        NavigationView {\n            ScrollView {\n                VStack(alignment: .leading, spacing: 16) {\n                    // Header\n                    HStack {\n                        Text(\"Pre-call Diagnosis Report\")\n                            .font(.system(size: 18, weight: .semibold))\n                            .foregroundColor(Color(hex: \"#1D1D1D\"))\n                        \n                        Spacer()\n                        \n                        Button(action: {\n                            isPresented = false\n                        }) {\n                            Image(systemName: \"xmark\")\n                                .foregroundColor(Color(hex: \"#525252\"))\n                                .font(.system(size: 16, weight: .medium))\n                        }\n                    }\n                    .padding(.horizontal, 20)\n                    .padding(.top, 20)\n                    \n                    // Status and Action Section\n                    VStack(spacing: 16) {\n                        if isRunningDiagnosis {\n                            VStack(spacing: 12) {\n                                Text(\"Running Pre-call Diagnosis...\")\n                                    .font(.system(size: 16, weight: .semibold))\n                                    .foregroundColor(Color(hex: \"#1D1D1D\"))\n                                \n                                ProgressView()\n                                    .progressViewStyle(CircularProgressViewStyle(tint: Color(hex: \"#00E3AA\")))\n                                    .scaleEffect(1.2)\n                            }\n                            .frame(maxWidth: .infinity)\n                            .padding(.vertical, 20)\n                        } else {\n                            VStack(spacing: 12) {\n                                Button(action: startPreCallDiagnosis) {\n                                    Text(\"Start Pre-call Diagnosis\")\n                                        .font(.system(size: 16, weight: .semibold))\n                                        .foregroundColor(.white)\n                                        .frame(maxWidth: .infinity)\n                                        .padding(.vertical, 12)\n                                        .background(viewModel.isPreCallDiagnosisDisabled ? Color.gray : Color(hex: \"#00E3AA\"))\n                                        .cornerRadius(8)\n                                }\n                                .disabled(viewModel.isPreCallDiagnosisDisabled || (viewModel.socketState != .connected && viewModel.socketState != .clientReady))\n                                \n                                if viewModel.isPreCallDiagnosisDisabled {\n                                    Text(\"Pre-call diagnosis is disabled during active calls\")\n                                        .font(.system(size: 14))\n                                        .foregroundColor(Color(hex: \"#D40000\"))\n                                        .multilineTextAlignment(.center)\n                                        .padding(.top, 8)\n                                }\n                                \n                                // Setup explanation\n                                VStack(alignment: .leading, spacing: 8) {\n                                    Text(\"What is Pre-call Diagnosis?\")\n                                        .font(.system(size: 14, weight: .semibold))\n                                        .foregroundColor(Color(hex: \"#1D1D1D\"))\n                                    \n                                    Text(\"Pre-call diagnosis tests your network connection to Telnyx servers by making a brief test call. It measures call quality metrics like jitter, round-trip time, and network stability to help you understand your connection quality before making important calls.\")\n                                        .font(.system(size: 13))\n                                        .foregroundColor(Color(hex: \"#525252\"))\n                                        .multilineTextAlignment(.leading)\n                                    \n                                    Text(\"Setup Required:\")\n                                        .font(.system(size: 14, weight: .semibold))\n                                        .foregroundColor(Color(hex: \"#1D1D1D\"))\n                                        .padding(.top, 4)\n                                    \n                                    Text(\"To use this feature, you need to configure a phone number in the Config.xcconfig file. Edit the file and set:\\n\\nPHONE_NUMBER = +15551234567\\n\\nReplace with a valid phone number that can receive test calls.\")\n                                        .font(.system(size: 13))\n                                        .foregroundColor(Color(hex: \"#525252\"))\n                                        .multilineTextAlignment(.leading)\n                                }\n                                .padding(12)\n                                .background(Color(hex: \"#F8F9FA\"))\n                                .cornerRadius(8)\n                                .padding(.top, 12)\n                            }\n                        }\n                    }\n                    .padding(.horizontal, 20)\n                    \n                    // Results Section\n                    if case .completed(let diagnosis) = preCallDiagnosisState {\n                        DiagnosisResultsView(diagnosis: diagnosis)\n                            .padding(.horizontal, 20)\n                    } else if case .failed(let error) = preCallDiagnosisState {\n                        VStack(spacing: 8) {\n                            Text(\"Pre-call Diagnosis Failed\")\n                                .font(.system(size: 16, weight: .semibold))\n                                .foregroundColor(Color(hex: \"#D40000\"))\n                            \n                            if let error = error {\n                                Text(error)\n                                    .font(.system(size: 14))\n                                    .foregroundColor(Color(hex: \"#525252\"))\n                                    .multilineTextAlignment(.center)\n                            }\n                        }\n                        .padding(.horizontal, 20)\n                        .padding(.vertical, 16)\n                        .background(Color(hex: \"#FFF5F5\"))\n                        .cornerRadius(8)\n                        .padding(.horizontal, 20)\n                    }\n                    \n                    Spacer(minLength: 20)\n                }\n            }\n            .navigationBarHidden(true)\n        }\n        .onReceive(viewModel.preCallDiagnosisStatePublisher) { state in\n            self.preCallDiagnosisState = state\n            if case .started = state {\n                isRunningDiagnosis = true\n            } else {\n                isRunningDiagnosis = false\n            }\n        }\n    }\n    \n    private func startPreCallDiagnosis() {\n        guard !viewModel.isPreCallDiagnosisDisabled else {\n            return\n        }\n        \n        guard viewModel.socketState == .connected || viewModel.socketState == .clientReady else {\n            return\n        }\n        \n        isRunningDiagnosis = true\n        preCallDiagnosisState = .started\n        let phone = Bundle.main.infoDictionary?[\"PhoneNumber\"] as? String\n\n        // Start the diagnosis with default parameters\n        viewModel.startPreCallDiagnosis(\n            destinationNumber: phone ?? \"\"\n        )\n    }\n}\n\nstruct DiagnosisResultsView: View {\n    let diagnosis: PreCallDiagnosis\n    \n    var body: some View {\n        VStack(alignment: .leading, spacing: 16) {\n            // Network Quality Section\n            VStack(alignment: .leading, spacing: 8) {\n                Text(\"Network Quality\")\n                    .font(.system(size: 16, weight: .semibold))\n                    .foregroundColor(Color(hex: \"#1D1D1D\"))\n                \n                MetricRow(label: \"Quality\", value: diagnosis.quality.rawValue.capitalized)\n                MetricRow(label: \"MOS Score\", value: String(format: \"%.2f\", diagnosis.mos))\n            }\n            \n            // Jitter Section\n            VStack(alignment: .leading, spacing: 8) {\n                Text(\"Jitter\")\n                    .font(.system(size: 16, weight: .semibold))\n                    .foregroundColor(Color(hex: \"#1D1D1D\"))\n                \n                MetricRow(label: \"Min\", value: String(format: \"%.2f ms\", diagnosis.jitter.min * 1000))\n                MetricRow(label: \"Max\", value: String(format: \"%.2f ms\", diagnosis.jitter.max * 1000))\n                MetricRow(label: \"Average\", value: String(format: \"%.2f ms\", diagnosis.jitter.avg * 1000))\n            }\n            \n            // RTT Section\n            VStack(alignment: .leading, spacing: 8) {\n                Text(\"Round Trip Time (RTT)\")\n                    .font(.system(size: 16, weight: .semibold))\n                    .foregroundColor(Color(hex: \"#1D1D1D\"))\n                \n                MetricRow(label: \"Min\", value: String(format: \"%.2f ms\", diagnosis.rtt.min * 1000))\n                MetricRow(label: \"Max\", value: String(format: \"%.2f ms\", diagnosis.rtt.max * 1000))\n                MetricRow(label: \"Average\", value: String(format: \"%.2f ms\", diagnosis.rtt.avg * 1000))\n            }\n            \n            // Session Stats Section\n            VStack(alignment: .leading, spacing: 8) {\n                Text(\"Session Statistics\")\n                    .font(.system(size: 16, weight: .semibold))\n                    .foregroundColor(Color(hex: \"#1D1D1D\"))\n                \n                MetricRow(label: \"Bytes Sent\", value: \"\\(diagnosis.bytesSent)\")\n                MetricRow(label: \"Bytes Received\", value: \"\\(diagnosis.bytesReceived)\")\n                MetricRow(label: \"Packets Sent\", value: \"\\(diagnosis.packetsSent)\")\n                MetricRow(label: \"Packets Received\", value: \"\\(diagnosis.packetsReceived)\")\n            }\n            \n            // ICE Candidates Section\n            if !diagnosis.iceCandidates.isEmpty {\n                VStack(alignment: .leading, spacing: 8) {\n                    Text(\"ICE Candidates\")\n                        .font(.system(size: 16, weight: .semibold))\n                        .foregroundColor(Color(hex: \"#1D1D1D\"))\n                    \n                    ForEach(diagnosis.iceCandidates.indices, id: \\.self) { index in\n                        let candidate = diagnosis.iceCandidates[index]\n                        ICECandidateRow(candidate: candidate)\n                    }\n                }\n            }\n        }\n    }\n}\n\nstruct MetricRow: View {\n    let label: String\n    let value: String\n    \n    var body: some View {\n        HStack {\n            Text(label)\n                .font(.system(size: 14))\n                .foregroundColor(Color(hex: \"#525252\"))\n            \n            Spacer()\n            \n            Text(value)\n                .font(.system(size: 14, weight: .medium))\n                .foregroundColor(Color(hex: \"#1D1D1D\"))\n        }\n        .padding(.vertical, 4)\n        .padding(.horizontal, 12)\n        .background(Color(hex: \"#F8F9FA\"))\n        .cornerRadius(6)\n    }\n}\n\nstruct ICECandidateRow: View {\n    let candidate: ICECandidate\n    \n    var body: some View {\n        VStack(alignment: .leading, spacing: 4) {\n            Text(\"Candidate \\(candidate.id)\")\n                .font(.system(size: 14, weight: .medium))\n                .foregroundColor(Color(hex: \"#1D1D1D\"))\n            \n            Text(\"\\(candidate.type), \\(candidate.candidateProtocol), \\(candidate.address):\\(candidate.port), Priority: \\(candidate.priority)\")\n                .font(.system(size: 12))\n                .foregroundColor(Color(hex: \"#525252\"))\n                .lineLimit(3)\n        }\n        .padding(.vertical, 8)\n        .padding(.horizontal, 12)\n        .background(Color(hex: \"#F0F0F0\"))\n        .cornerRadius(6)\n    }\n}\n\nstruct PreCallDiagnosisBottomSheet_Previews: PreviewProvider {\n    static var previews: some View {\n        PreCallDiagnosisBottomSheet(\n            isPresented: .constant(true),\n            viewModel: HomeViewModel()\n        )\n    }\n}\n"
        }
    ]
}